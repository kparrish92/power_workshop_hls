subtitle = "Cohen's d = .4")
med_power = plot_power_curve(m_mean1, m_sd1, m_mean2, m_sd2, sample_sizes) +
theme(legend.position='none') +
theme(axis.text.x = element_text(size = 5)) +
labs(title = "Medium effect size",
subtitle = "Cohen's d = .7")
large_power = plot_power_curve(l_mean1, l_sd1, l_mean2, l_sd2, sample_sizes) +
theme(legend.position='none') +
theme(axis.text.x = element_text(size = 5)) +
labs(title = "Large effect size",
subtitle = "Cohen's d = 1")
small_power +
ggsave(here("img", "small_power_curve.png"))
ggpubr::ggarrange(small_power, med_power, large_power,
nrow = 1, legend = NULL) +
ggsave(here("img", "power_curve.png"))
source("~/Documents/GitHub/power_workshop_hls/plots.R", echo=TRUE)
ggpubr::ggarrange(small_power, med_power, large_power,
nrow = 1, legend = NULL)
small_power = plot_power_curve(s_mean1, s_sd1, s_mean2, s_sd2, sample_sizes) +
theme(legend.position='none') +
theme(axis.text.x = element_text(size = 5) +
labs(title = "Small effect size",
subtitle = "Cohen's d = .4")
View(small_power)
View(small_power)
small_power
plot_power_curve(m_mean1, m_sd1, m_mean2, m_sd2, sample_sizes) +
theme(legend.position='none') +
theme(axis.text.x = element_text(size = 5)) +
labs(title = "Medium effect size",
subtitle = "Cohen's d = .7")
plot_power_curve(s_mean1, s_sd1, s_mean2, s_sd2, sample_sizes) +
theme(legend.position='none') +
theme(axis.text.x = element_text(size = 5) +
labs(title = "Small effect size",
subtitle = "Cohen's d = .4")
small_power = plot_power_curve(s_mean1, s_sd1, s_mean2, s_sd2, sample_sizes) +
theme(legend.position='none') +
theme(axis.text.x = element_text(size = 5)) +
labs(title = "Small effect size",
subtitle = "Cohen's d = .4")
small_power = plot_power_curve(s_mean1, s_sd1, s_mean2, s_sd2, sample_sizes) +
theme(legend.position='none') +
theme(axis.text.x = element_text(size = 5)) +
labs(title = "Small effect size",
subtitle = "Cohen's d = .4")
med_power = plot_power_curve(m_mean1, m_sd1, m_mean2, m_sd2, sample_sizes) +
theme(legend.position='none') +
theme(axis.text.x = element_text(size = 5)) +
labs(title = "Medium effect size",
subtitle = "Cohen's d = .7")
large_power = plot_power_curve(l_mean1, l_sd1, l_mean2, l_sd2, sample_sizes) +
theme(legend.position='none') +
theme(axis.text.x = element_text(size = 5)) +
labs(title = "Large effect size",
subtitle = "Cohen's d = 1")
small_power +
ggsave(here("img", "small_power_curve.png"))
ggpubr::ggarrange(small_power, med_power, large_power,
nrow = 1, legend = NULL) +
ggsave(here("img", "power_curve.png"))
small_power
small_power +
ggsave(here("img", "small_power_curve.png"))
# Trying larger sample sizes
sample_sizes = c(30, 60, 90, 120, 150)
plot_power_curve_ul(s1, s2, i = 100, sample_sizes)
sample_sizes = c(30, 60, 90, 120, 150)
plot_power_curve_ul(s1, s2, i = 100, sample_sizes)
# Creates a plot using a loop within a loop, given two sampling distributions (we will use s1 and s2 again, a number of iterations per loop, and a vector of sample sizes you want to try)
plot_power_curve_ul = function(s1, s2, i, sample_sizes)
{
loop_df = matrix(nrow = i)
sizes = sample_sizes
container_df = matrix(nrow = length(sizes), ncol = 2)
for(thisSize in 1:nrow(container_df)){
for(thisRun in 1:i){
sample_1 = s1 %>% sample(sizes[thisSize])
sample_2 = s2 %>% sample(sizes[thisSize])
t_test = t.test(sample_1,sample_2)
loop_df[thisRun] = t_test$p.value
}
container_df[thisSize, 1] = sizes[thisSize]
container_df[thisSize, 2] = sum(loop_df < .05)/i
}
plot_df = as.data.frame(container_df) %>%
rename("Sample" = V1) %>%
rename("Power" = V2)
plot = plot_df %>%
ggplot(aes(x = Sample, y = Power, color = Power)) +
geom_point() +
geom_line() +
ggtitle("Power Curve") +
geom_hline(yintercept = .8, color = "red",
linetype = "dashed", alpha = .5) +
theme_minimal() + scale_x_continuous(breaks=seq(0,max(sample_sizes),10)) + ylim(0,1)
return(plot)
}
sample_sizes = c(20, 40, 60, 80)
plot_power_curve_ul(s1, s2, i = 100, sample_sizes)
# Trying larger sample sizes
sample_sizes = c(30, 60, 90, 120, 150)
plot_power_curve_ul(s1, s2, i = 100, sample_sizes)
# Create a function to calculate Cohen's D
effect_size = function(mean1, mean2, sd1, sd2)
{
mean_diff = mean1 - mean2
pooled_sd = sqrt(((sd1^2 + sd2^2)/2))
es = mean_diff/pooled_sd
return(es)
}
# Use the function - also using our values specified earlier.
effect_size(mean1, mean2, sd1, sd2)
effect_size(mean1 = 46, mean2 = 30, sd1 = 20, sd2 = 20) # comparison 1
effect_size(mean1 = 40, mean2 = 30, sd1 = 20, sd2 = 20) # comparison 2
effect_size(mean1 = 33, mean2 = 30, sd1 = 20, sd2 = 20) # comparison 3
effect_size(mean1 = 46, mean2 = 30, sd1 = 20, sd2 = 20) # comparison 1
effect_size(mean1 = 40, mean2 = 30, sd1 = 20, sd2 = 20) # comparison 2
effect_size(mean1 = 32, mean2 = 30, sd1 = 20, sd2 = 20) # comparison 3
effect_size(mean1 = 46, mean2 = 30, sd1 = 20, sd2 = 20) # comparison 1
effect_size(mean1 = 40, mean2 = 30, sd1 = 20, sd2 = 20) # comparison 2
effect_size(mean1 = 34, mean2 = 30, sd1 = 20, sd2 = 20) # comparison 3
set.seed(1)
s1_l = rnorm(n = 10000, mean = 46, sd = 20)
s2_l = rnorm(n = 10000, mean = 30, sd = 20)
# Trying larger sample sizes
sample_sizes = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)
plot_power_curve_ul(s1 = s1_l, s2 = s2_l, i = 100, sample_sizes)
set.seed(1)
s1_m = rnorm(n = 10000, mean = 40, sd = 20)
s2_m = rnorm(n = 10000, mean = 30, sd = 20)
# Trying larger sample sizes
sample_sizes = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)
plot_power_curve_ul(s1 = s1_m, s2 = s2_m, i = 100, sample_sizes)
# Trying larger sample sizes
sample_sizes = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)
plot_power_curve_ul(s1 = s1_m, s2 = s2_m, i = 1000, sample_sizes)
# Trying larger sample sizes
sample_sizes = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120)
plot_power_curve_ul(s1 = s1_m, s2 = s2_m, i = 100, sample_sizes)
set.seed(1)
s1_m = rnorm(n = 10000, mean = 34, sd = 20)
s2_m = rnorm(n = 10000, mean = 30, sd = 20)
set.seed(1)
s1_s = rnorm(n = 10000, mean = 34, sd = 20)
s2_s = rnorm(n = 10000, mean = 30, sd = 20)
sample_sizes = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100,
110, 120, 130, 140, 150, 160, 170, 180, 190, 200)
plot_power_curve_ul(s1 = s1_s, s2 = s2_s, i = 100, sample_sizes)
sample_sizes = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100,
110, 120, 130, 140, 150, 160, 170, 180, 190, 200)
plot_power_curve_ul(s1 = s1_s, s2 = s2_s, i = 1000, sample_sizes)
sample_sizes = c(0, 25, 50, 75, 100,
125, 150, 175, 200,
225, 250, 275, 300,
325, 350, 375, 400)
plot_power_curve_ul(s1 = s1_s, s2 = s2_s, i = 1000, sample_sizes)
sample_sizes = c(0, 25, 50, 75, 100,
125, 150, 175, 200,
225, 250, 275, 300,
325, 350, 375, 400)
plot_power_curve_ul(s1 = s1_s, s2 = s2_s, i = 1000, sample_sizes)
sample_sizes = c(25, 50, 75, 100,
125, 150, 175, 200,
225, 250, 275, 300,
325, 350, 375, 400)
plot_power_curve_ul(s1 = s1_s, s2 = s2_s, i = 1000, sample_sizes)
library(here)
### This script generates the plots used in the presentation
#calculate Cohen's d
mean1 = 38
mean2 = 30
sd1 = 20
sd2 = 20
set.seed(1)
#### Rnorm resimulates the underlying distribution, I want to sample from it.
s1 = rnorm(n = 10000, mean = mean1, sd = sd1)
s2 = rnorm(n = 10000, mean = mean2, sd = sd2)
df_10 = es_p_df(k = 200, n1 = 10, n2 = 10, s1, s2) %>%
mutate(n = 10)
df_20 = es_p_df(k = 200, n1 = 20, n2 = 20, s1, s2) %>%
mutate(n = 20)
df_30 = es_p_df(k = 200, n1 = 30, n2 = 30, s1, s2) %>%
mutate(n = 30)
df_40 = es_p_df(k = 200, n1 = 40, n2 = 40, s1, s2) %>%
mutate(n = 40)
df_50 = es_p_df(k = 200, n1 = 50, n2 = 50, s1, s2) %>%
mutate(n = 50)
df_60 = es_p_df(k = 200, n1 = 60, n2 = 60, s1, s2) %>%
mutate(n = 60)
df_70 = es_p_df(k = 200, n1 = 70, n2 = 70, s1, s2) %>%
mutate(n = 70)
df_80 = es_p_df(k = 200, n1 = 80, n2 = 80, s1, s2) %>%
mutate(n = 80)
df_90 = es_p_df(k = 200, n1 = 90, n2 = 90, s1, s2) %>%
mutate(n = 90)
df_100 = es_p_df(k = 200, n1 = 100, n2 = 100, s1, s2) %>%
mutate(n = 100)
full = rbind(df_10, df_20, df_30, df_40, df_50,
df_60, df_70, df_80, df_90, df_100) %>%
mutate(is_sig = case_when(p < .05 ~ "Significant",
p >= .05 ~ "Not Significant"))
df_200 = es_p_df(k = 200, n1 = 200, n2 = 200, s1, s2) %>%
mutate(n = 200)
df_300 = es_p_df(k = 200, n1 = 300, n2 = 300, s1, s2) %>%
mutate(n = 300)
df_400 = es_p_df(k = 200, n1 = 400, n2 = 400, s1, s2) %>%
mutate(n = 400)
df_500 = es_p_df(k = 200, n1 = 500, n2 = 500, s1, s2) %>%
mutate(n = 500)
df_600 = es_p_df(k = 200, n1 = 600, n2 = 600, s1, s2) %>%
mutate(n = 600)
full2 = rbind(df_100, df_200, df_300,
df_400, df_500, df_600) %>%
mutate(is_sig = case_when(p < .05 ~ "Significant",
p >= .05 ~ "Not Significant"))
full %>%
ggplot(aes(x = es, y = n, color = as.factor(is_sig))) + geom_jitter(alpha = .4) +
geom_vline(xintercept = .4, linetype = "dashed", alpha = .8, color = 'red') +
theme_minimal() +
scale_color_manual(values = c("grey", "#efa311")) +
labs(title = "Results of 2000 simulated t-tests",
subtitle = "Replication of Brysbaert (2020)",
caption = "Showing the results of all studies") +
ggsave(here("img", "2k_sim_all.png"), dpi = 1200)
full %>%
filter(is_sig == "Significant") %>%
ggplot(aes(x = es, y = n, color = as.factor(is_sig))) + geom_jitter(alpha = .4) +
geom_vline(xintercept = .4, linetype = "dashed", alpha = .8, color = "red") + theme_minimal() +
scale_color_manual(values = c("#efa311")) +
labs(title = "Results of 2000 simulated t-tests",
subtitle = "Replication of Brysbaert (2020)",
caption = "Showing significant results only") +
ggsave(here("img", "2k_sim_sig.png"), dpi = 1200)
library(tidyverse)
source(here::here("scripts" , "00_libs.R"))
source(here::here("scripts", "00_libs.R"))
source(here::here("scripts", "01_helpers.R"))
source(here::here("scripts", "01_helpers.R"))
### This script generates the plots used in the presentation
#calculate Cohen's d
mean1 = 38
mean2 = 30
sd1 = 20
sd2 = 20
set.seed(1)
#### Rnorm resimulates the underlying distribution, I want to sample from it.
s1 = rnorm(n = 10000, mean = mean1, sd = sd1)
s2 = rnorm(n = 10000, mean = mean2, sd = sd2)
df_10 = es_p_df(k = 200, n1 = 10, n2 = 10, s1, s2) %>%
mutate(n = 10)
df_20 = es_p_df(k = 200, n1 = 20, n2 = 20, s1, s2) %>%
mutate(n = 20)
df_30 = es_p_df(k = 200, n1 = 30, n2 = 30, s1, s2) %>%
mutate(n = 30)
df_40 = es_p_df(k = 200, n1 = 40, n2 = 40, s1, s2) %>%
mutate(n = 40)
df_50 = es_p_df(k = 200, n1 = 50, n2 = 50, s1, s2) %>%
mutate(n = 50)
df_60 = es_p_df(k = 200, n1 = 60, n2 = 60, s1, s2) %>%
mutate(n = 60)
df_70 = es_p_df(k = 200, n1 = 70, n2 = 70, s1, s2) %>%
mutate(n = 70)
df_80 = es_p_df(k = 200, n1 = 80, n2 = 80, s1, s2) %>%
mutate(n = 80)
df_90 = es_p_df(k = 200, n1 = 90, n2 = 90, s1, s2) %>%
mutate(n = 90)
df_100 = es_p_df(k = 200, n1 = 100, n2 = 100, s1, s2) %>%
mutate(n = 100)
full = rbind(df_10, df_20, df_30, df_40, df_50,
df_60, df_70, df_80, df_90, df_100) %>%
mutate(is_sig = case_when(p < .05 ~ "Significant",
p >= .05 ~ "Not Significant"))
df_200 = es_p_df(k = 200, n1 = 200, n2 = 200, s1, s2) %>%
mutate(n = 200)
df_300 = es_p_df(k = 200, n1 = 300, n2 = 300, s1, s2) %>%
mutate(n = 300)
df_400 = es_p_df(k = 200, n1 = 400, n2 = 400, s1, s2) %>%
mutate(n = 400)
df_500 = es_p_df(k = 200, n1 = 500, n2 = 500, s1, s2) %>%
mutate(n = 500)
df_600 = es_p_df(k = 200, n1 = 600, n2 = 600, s1, s2) %>%
mutate(n = 600)
full2 = rbind(df_100, df_200, df_300,
df_400, df_500, df_600) %>%
mutate(is_sig = case_when(p < .05 ~ "Significant",
p >= .05 ~ "Not Significant"))
full %>%
ggplot(aes(x = es, y = n, color = as.factor(is_sig))) + geom_jitter(alpha = .4) +
geom_vline(xintercept = .4, linetype = "dashed", alpha = .8, color = 'red') +
theme_minimal() +
scale_color_manual(values = c("grey", "#efa311")) +
labs(title = "Results of 2000 simulated t-tests",
subtitle = "Replication of Brysbaert (2020)",
caption = "Showing the results of all studies") +
ggsave(here("img", "2k_sim_all.png"), dpi = 1200)
full %>%
filter(is_sig == "Significant") %>%
ggplot(aes(x = es, y = n, color = as.factor(is_sig))) + geom_jitter(alpha = .4) +
geom_vline(xintercept = .4, linetype = "dashed", alpha = .8, color = "red") + theme_minimal() +
scale_color_manual(values = c("#efa311")) +
labs(title = "Results of 2000 simulated t-tests",
subtitle = "Replication of Brysbaert (2020)",
caption = "Showing significant results only") +
ggsave(here("img", "2k_sim_sig.png"), dpi = 1200)
full %>%
filter(is_sig == "Significant") %>%
ggplot(aes(x = es, y = n, color = as.factor(is_sig))) + geom_jitter(alpha = .4) +
geom_vline(xintercept = .4, linetype = "dashed", alpha = .8, color = "red") + theme_minimal() +
scale_color_manual(values = c("#efa311")) +
labs(title = "Results of 2000 simulated t-tests",
subtitle = "Replication of Brysbaert (2020)",
caption = "Showing significant results only") +
+scale_color_discrete(name="")
full %>%
filter(is_sig == "Significant") %>%
ggplot(aes(x = es, y = n, color = as.factor(is_sig))) + geom_jitter(alpha = .4) +
geom_vline(xintercept = .4, linetype = "dashed", alpha = .8, color = "red") + theme_minimal() +
scale_color_manual(values = c("#efa311")) +
labs(title = "Results of 2000 simulated t-tests",
subtitle = "Replication of Brysbaert (2020)",
caption = "Showing significant results only") +
scale_color_discrete(name="")
full %>%
filter(is_sig == "Significant") %>%
ggplot(aes(x = es, y = n, color = as.factor(is_sig))) + geom_jitter(alpha = .4) +
geom_vline(xintercept = .4, linetype = "dashed", alpha = .8, color = "red") + theme_minimal() +
scale_color_manual(values = c("#efa311", name="")) +
labs(title = "Results of 2000 simulated t-tests",
subtitle = "Replication of Brysbaert (2020)",
caption = "Showing significant results only")
full %>%
filter(is_sig == "Significant") %>%
ggplot(aes(x = es, y = n, color = as.factor(is_sig))) + geom_jitter(alpha = .4) +
geom_vline(xintercept = .4, linetype = "dashed", alpha = .8, color = "red") + theme_minimal() +
scale_color_manual(values = c("#efa311"), name = "")
full %>%
ggplot(aes(x = es, y = n, color = as.factor(is_sig))) + geom_jitter(alpha = .4) +
geom_vline(xintercept = .4, linetype = "dashed", alpha = .8, color = 'red') +
theme_minimal() +
scale_color_manual(values = c("grey", "#efa311"), name = "") +
labs(title = "Results of 2000 simulated t-tests",
subtitle = "Replication of Brysbaert (2020)",
caption = "Showing the results of all studies") +
ggsave(here("img", "2k_sim_all.png"), dpi = 1200)
full %>%
filter(is_sig == "Significant") %>%
ggplot(aes(x = es, y = n, color = as.factor(is_sig))) + geom_jitter(alpha = .4) +
geom_vline(xintercept = .4, linetype = "dashed", alpha = .8, color = "red") + theme_minimal() +
scale_color_manual(values = c("#efa311"), name = "") +
labs(title = "Results of 2000 simulated t-tests",
subtitle = "Replication of Brysbaert (2020)",
caption = "Showing significant results only") +
ggsave(here("img", "2k_sim_sig.png"), dpi = 1200)
source("~/Documents/GitHub/power_workshop_hls/scripts/02_simulate_data.R", echo=TRUE)
full %>%
filter(is_sig == "Significant") %>%
ggplot(aes(x = es, y = n, color = as.factor(is_sig))) + geom_jitter(alpha = .4) +
geom_vline(xintercept = .4, linetype = "dashed", alpha = .8, color = "red") + theme_minimal() +
scale_color_manual(values = c("#efa311"), name = "") +
labs(title = "Results of 2000 simulated t-tests",
subtitle = "Replication of Brysbaert (2020)",
caption = "Showing significant results only") +
xlim(-2,2)
source(here::here("scripts", "01_helpers.R"))
### This script generates the plots used in the presentation
#calculate Cohen's d
mean1 = 38
mean2 = 30
sd1 = 20
sd2 = 20
set.seed(1)
#### Rnorm resimulates the underlying distribution, I want to sample from it.
s1 = rnorm(n = 10000, mean = mean1, sd = sd1)
s2 = rnorm(n = 10000, mean = mean2, sd = sd2)
df_10 = es_p_df(k = 200, n1 = 10, n2 = 10, s1, s2) %>%
mutate(n = 10)
df_20 = es_p_df(k = 200, n1 = 20, n2 = 20, s1, s2) %>%
mutate(n = 20)
df_30 = es_p_df(k = 200, n1 = 30, n2 = 30, s1, s2) %>%
mutate(n = 30)
df_40 = es_p_df(k = 200, n1 = 40, n2 = 40, s1, s2) %>%
mutate(n = 40)
df_50 = es_p_df(k = 200, n1 = 50, n2 = 50, s1, s2) %>%
mutate(n = 50)
df_60 = es_p_df(k = 200, n1 = 60, n2 = 60, s1, s2) %>%
mutate(n = 60)
df_70 = es_p_df(k = 200, n1 = 70, n2 = 70, s1, s2) %>%
mutate(n = 70)
df_80 = es_p_df(k = 200, n1 = 80, n2 = 80, s1, s2) %>%
mutate(n = 80)
df_90 = es_p_df(k = 200, n1 = 90, n2 = 90, s1, s2) %>%
mutate(n = 90)
df_100 = es_p_df(k = 200, n1 = 100, n2 = 100, s1, s2) %>%
mutate(n = 100)
full = rbind(df_10, df_20, df_30, df_40, df_50,
df_60, df_70, df_80, df_90, df_100) %>%
mutate(is_sig = case_when(p < .05 ~ "Significant",
p >= .05 ~ "Not Significant"))
df_200 = es_p_df(k = 200, n1 = 200, n2 = 200, s1, s2) %>%
mutate(n = 200)
df_300 = es_p_df(k = 200, n1 = 300, n2 = 300, s1, s2) %>%
mutate(n = 300)
df_400 = es_p_df(k = 200, n1 = 400, n2 = 400, s1, s2) %>%
mutate(n = 400)
df_500 = es_p_df(k = 200, n1 = 500, n2 = 500, s1, s2) %>%
mutate(n = 500)
df_600 = es_p_df(k = 200, n1 = 600, n2 = 600, s1, s2) %>%
mutate(n = 600)
full2 = rbind(df_100, df_200, df_300,
df_400, df_500, df_600) %>%
mutate(is_sig = case_when(p < .05 ~ "Significant",
p >= .05 ~ "Not Significant"))
full %>%
ggplot(aes(x = es, y = n, color = as.factor(is_sig))) + geom_jitter(alpha = .4) +
geom_vline(xintercept = .4, linetype = "dashed", alpha = .8, color = 'red') +
theme_minimal() +
scale_color_manual(values = c("grey", "#efa311"), name = "") +
labs(title = "Results of 2000 simulated t-tests",
subtitle = "Replication of Brysbaert (2020)",
caption = "Showing the results of all studies") +
xlim(-2,2) +
ggsave(here("img", "2k_sim_all.png"), dpi = 1200)
full %>%
filter(is_sig == "Significant") %>%
ggplot(aes(x = es, y = n, color = as.factor(is_sig))) + geom_jitter(alpha = .4) +
geom_vline(xintercept = .4, linetype = "dashed", alpha = .8, color = "red") + theme_minimal() +
scale_color_manual(values = c("#efa311"), name = "") +
labs(title = "Results of 2000 simulated t-tests",
subtitle = "Replication of Brysbaert (2020)",
caption = "Showing significant results only") +
xlim(-2,2)
ggsave(here("img", "2k_sim_sig.png"), dpi = 1200)
source(here::here("scripts", "01_helpers.R"))
### This script generates the plots used in the presentation
#calculate Cohen's d
mean1 = 38
mean2 = 30
sd1 = 20
sd2 = 20
set.seed(1)
#### Rnorm resimulates the underlying distribution, I want to sample from it.
s1 = rnorm(n = 10000, mean = mean1, sd = sd1)
s2 = rnorm(n = 10000, mean = mean2, sd = sd2)
df_10 = es_p_df(k = 200, n1 = 10, n2 = 10, s1, s2) %>%
mutate(n = 10)
df_20 = es_p_df(k = 200, n1 = 20, n2 = 20, s1, s2) %>%
mutate(n = 20)
df_30 = es_p_df(k = 200, n1 = 30, n2 = 30, s1, s2) %>%
mutate(n = 30)
df_40 = es_p_df(k = 200, n1 = 40, n2 = 40, s1, s2) %>%
mutate(n = 40)
df_50 = es_p_df(k = 200, n1 = 50, n2 = 50, s1, s2) %>%
mutate(n = 50)
df_60 = es_p_df(k = 200, n1 = 60, n2 = 60, s1, s2) %>%
mutate(n = 60)
df_70 = es_p_df(k = 200, n1 = 70, n2 = 70, s1, s2) %>%
mutate(n = 70)
df_80 = es_p_df(k = 200, n1 = 80, n2 = 80, s1, s2) %>%
mutate(n = 80)
df_90 = es_p_df(k = 200, n1 = 90, n2 = 90, s1, s2) %>%
mutate(n = 90)
df_100 = es_p_df(k = 200, n1 = 100, n2 = 100, s1, s2) %>%
mutate(n = 100)
full = rbind(df_10, df_20, df_30, df_40, df_50,
df_60, df_70, df_80, df_90, df_100) %>%
mutate(is_sig = case_when(p < .05 ~ "Significant",
p >= .05 ~ "Not Significant"))
df_200 = es_p_df(k = 200, n1 = 200, n2 = 200, s1, s2) %>%
mutate(n = 200)
df_300 = es_p_df(k = 200, n1 = 300, n2 = 300, s1, s2) %>%
mutate(n = 300)
df_400 = es_p_df(k = 200, n1 = 400, n2 = 400, s1, s2) %>%
mutate(n = 400)
df_500 = es_p_df(k = 200, n1 = 500, n2 = 500, s1, s2) %>%
mutate(n = 500)
df_600 = es_p_df(k = 200, n1 = 600, n2 = 600, s1, s2) %>%
mutate(n = 600)
full2 = rbind(df_100, df_200, df_300,
df_400, df_500, df_600) %>%
mutate(is_sig = case_when(p < .05 ~ "Significant",
p >= .05 ~ "Not Significant"))
full %>%
ggplot(aes(x = es, y = n, color = as.factor(is_sig))) + geom_jitter(alpha = .4) +
geom_vline(xintercept = .4, linetype = "dashed", alpha = .8, color = 'red') +
theme_minimal() +
scale_color_manual(values = c("grey", "#efa311"), name = "") +
labs(title = "Results of 2000 simulated t-tests",
subtitle = "Replication of Brysbaert (2020)",
caption = "Showing the results of all studies") +
xlim(-2,2) +
ggsave(here("img", "2k_sim_all.png"), dpi = 1200)
full %>%
filter(is_sig == "Significant") %>%
ggplot(aes(x = es, y = n, color = as.factor(is_sig))) + geom_jitter(alpha = .4) +
geom_vline(xintercept = .4, linetype = "dashed", alpha = .8, color = "red") + theme_minimal() +
scale_color_manual(values = c("#efa311"), name = "") +
labs(title = "Results of 2000 simulated t-tests",
subtitle = "Replication of Brysbaert (2020)",
caption = "Showing significant results only") +
xlim(-2,2) +
ggsave(here("img", "2k_sim_sig.png"), dpi = 1200)
knitr::include_graphics(here("img", "cohens_d.jpg"))
plot_power_curve_ul(s1 = s1_s, s2 = s2_s, i = 1000, sample_sizes) +
scale_x_continuous(breaks = seq(0, 500, by = 50))
sample_sizes = c(50, 100, 150, 200,
250, 300, 350, 400,
450, 500)
plot_power_curve_ul(s1 = s1_s, s2 = s2_s, i = 1000, sample_sizes) +
scale_x_continuous(breaks = seq(0, 500, by = 50))
source("~/.active-rstudio-document", echo=TRUE)
