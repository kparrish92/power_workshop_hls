### large
l_mean1 = 85
l_sd1 = 25
l_mean2 = 60
l_sd2 = 25
#define plant growth values for each group
#calculate Cohen's d
power_analysis = function(mean1, sd1, mean2, sd2)
{
loop_df = matrix(nrow = i)
container_df = matrix(nrow = 10, ncol = 2)
sizes = c(10,20,30,40,50,60,70,80,90,100)
for(thisSize in 1:nrow(container_df)){
for(thisRun in 1:i){
sample_1 = rnorm(sizes[thisSize], m = mean1, sd = sd1)
sample_2 = rnorm(sizes[thisSize], m = mean2, sd = sd2)
t_test = t.test(sample_1,sample_2)
loop_df[thisRun] = t_test$p.value
}
container_df[thisSize, 1] = sizes[thisSize]
container_df[thisSize, 2] = sum(loop_df < .05)/i
}
plot(container_df)
lines(container_df)
plot_df = as.data.frame(container_df) %>%
rename("Sample" = V1) %>%
rename("Power" = V2)
plot = plot_df %>%
ggplot(aes(x = Sample, y = Power, color = Power)) +
geom_point() +
geom_line() +
ggtitle("Power Curve") +
geom_hline(yintercept = .8, color = "red",
linetype = "dashed", alpha = .5) +
theme_minimal() + scale_x_continuous(breaks=seq(0,100,10)) + ylim(0,1)
return(plot)
}
small_power = power_analysis(s_mean1, s_sd1, s_mean2, s_sd2) +
ggtitle("Small effect size") +
theme(legend.position='none')
med_power = power_analysis(m_mean1, m_sd1, m_mean2, m_sd2) +
ggtitle("Medium effect size") +
theme(legend.position='none')
large_power = power_analysis(l_mean1, l_sd1, l_mean2, l_sd2) +
ggtitle("Large effect size") +
theme(legend.position='none')
ggpubr::ggarrange(small_power, med_power, large_power,
nrow = 1, common.legend = TRUE)
### A power analysis workshop for HLS 2022
#### 01 - simulating data ####
library(tidyverse)
library(lsr)
# Loop the t.test and the sim
#number of iterations ----- write this for a small, med, and large eff size
### .4, .7 and 1
### Small
i = 1000
s_mean1 = 70
s_sd1 = 25
s_mean2 = 60
s_sd2 = 25
### Medium
m_mean1 = 77.5
m_sd1 = 25
m_mean2 = 60
m_sd2 = 25
### large
l_mean1 = 85
l_sd1 = 25
l_mean2 = 60
l_sd2 = 25
#define plant growth values for each group
#calculate Cohen's d
power_analysis = function(mean1, sd1, mean2, sd2)
{
loop_df = matrix(nrow = i)
container_df = matrix(nrow = 10, ncol = 2)
sizes = c(10,20,30,40,50,60,70,80,90,100)
for(thisSize in 1:nrow(container_df)){
for(thisRun in 1:i){
sample_1 = rnorm(sizes[thisSize], m = mean1, sd = sd1)
sample_2 = rnorm(sizes[thisSize], m = mean2, sd = sd2)
t_test = t.test(sample_1,sample_2)
loop_df[thisRun] = t_test$p.value
}
container_df[thisSize, 1] = sizes[thisSize]
container_df[thisSize, 2] = sum(loop_df < .05)/i
}
plot(container_df)
lines(container_df)
plot_df = as.data.frame(container_df) %>%
rename("Sample" = V1) %>%
rename("Power" = V2)
plot = plot_df %>%
ggplot(aes(x = Sample, y = Power, color = Power)) +
geom_point() +
geom_line() +
ggtitle("Power Curve") +
geom_hline(yintercept = .8, color = "red",
linetype = "dashed", alpha = .5) +
theme_minimal() + scale_x_continuous(breaks=seq(0,100,10)) + ylim(0,1)
return(plot)
}
small_power = power_analysis(s_mean1, s_sd1, s_mean2, s_sd2) +
ggtitle("Small effect size") +
theme(legend.position='none')
med_power = power_analysis(m_mean1, m_sd1, m_mean2, m_sd2) +
ggtitle("Medium effect size") +
theme(legend.position='none')
large_power = power_analysis(l_mean1, l_sd1, l_mean2, l_sd2) +
ggtitle("Large effect size") +
theme(legend.position='none')
ggpubr::ggarrange(small_power, med_power, large_power,
nrow = 1, common.legend = TRUE)
ggpubr::ggarrange(small_power, med_power, large_power,
nrow = 1, legend = NULL)
sample_s = data.frame("score" = rnorm(n = 100, m = 70, sd = 25),
"participant" = 1:100)
sample_m = data.frame("score" = rnorm(n = 100, m = 77.5, sd = 25),
"participant" = 1:100)
sample_l = data.frame("score" = rnorm(n = 100, m = 85, sd = 25),
"participant" = 1:100)
draw_random_sample(sample_s)
draw_random_sample = function(full_df)
{
slice = full_df %>%
sample_n(10)
sample_highlight = full_df %>%
mutate(sampled = case_when(
participant %in% slice$participant ~ 1,
!participant %in% slice$participant ~ 0))
sample_highlight_m = sample_highlight %>%
filter(sampled == "1")
mean(sample_highlight_m$score)
sd(sample_highlight_m$score)
p = ggplot(sample_highlight, aes(x = score, fill = as.factor(sampled))) +
geom_dotplot(stackgroups = TRUE, binwidth = 2, binpositions = "all") +
annotate(geom = 'text',
label = paste0("Mean = ",
round(mean(sample_highlight_m$score),
digits = 2), " (",
round(sd(sample_highlight_m$score),
digits = 2), ")"),
x = -Inf, y = Inf, hjust = -.5, vjust = 2) +
theme(legend.position = "none")
return(p)
}
draw_random_sample(sample_1)
draw_random_sample(sample_s)
draw_random_sample(sample_m)
draw_random_sample(sample_l)
draw_random_sample(sample_s)
### A power analysis workshop for HLS 2022
#### 01 - simulating data ####
library(tidyverse)
library(lsr)
# Loop the t.test and the sim
#number of iterations ----- write this for a small, med, and large eff size
### .4, .7 and 1
### Small
i = 1000
s_mean1 = 70
s_sd1 = 25
s_mean2 = 60
s_sd2 = 25
### Medium
m_mean1 = 77.5
m_sd1 = 25
m_mean2 = 60
m_sd2 = 25
### large
l_mean1 = 85
l_sd1 = 25
l_mean2 = 60
l_sd2 = 25
#define plant growth values for each group
#calculate Cohen's d
power_analysis = function(mean1, sd1, mean2, sd2)
{
loop_df = matrix(nrow = i)
container_df = matrix(nrow = 10, ncol = 2)
sizes = c(10,20,30,40,50,60,70,80,90,100)
for(thisSize in 1:nrow(container_df)){
for(thisRun in 1:i){
sample_1 = rnorm(sizes[thisSize], m = mean1, sd = sd1)
sample_2 = rnorm(sizes[thisSize], m = mean2, sd = sd2)
t_test = t.test(sample_1,sample_2)
loop_df[thisRun] = t_test$p.value
}
container_df[thisSize, 1] = sizes[thisSize]
container_df[thisSize, 2] = sum(loop_df < .05)/i
}
plot(container_df)
lines(container_df)
plot_df = as.data.frame(container_df) %>%
rename("Sample" = V1) %>%
rename("Power" = V2)
plot = plot_df %>%
ggplot(aes(x = Sample, y = Power, color = Power)) +
geom_point() +
geom_line() +
ggtitle("Power Curve") +
geom_hline(yintercept = .8, color = "red",
linetype = "dashed", alpha = .5) +
theme_minimal() + scale_x_continuous(breaks=seq(0,100,10)) + ylim(0,1)
return(plot)
}
small_power = power_analysis(s_mean1, s_sd1, s_mean2, s_sd2) +
ggtitle("Small effect size") +
theme(legend.position='none')
med_power = power_analysis(m_mean1, m_sd1, m_mean2, m_sd2) +
ggtitle("Medium effect size") +
theme(legend.position='none')
large_power = power_analysis(l_mean1, l_sd1, l_mean2, l_sd2) +
ggtitle("Large effect size") +
theme(legend.position='none')
ggpubr::ggarrange(small_power, med_power, large_power,
nrow = 1, legend = NULL)
### A power analysis workshop for HLS 2022
#### 01 - simulating data ####
library(tidyverse)
library(lsr)
# Loop the t.test and the sim
#number of iterations ----- write this for a small, med, and large eff size
### .4, .7 and 1
### Small cohen's d = .4
i = 1000
s_mean1 = 62.5
s_sd1 = 25
s_mean2 = 60
s_sd2 = 25
### Medium cohen's d = .7
m_mean1 = 72.5
m_sd1 = 25
m_mean2 = 60
m_sd2 = 25
### large large cohen's d = 1
l_mean1 = 80
l_sd1 = 25
l_mean2 = 60
l_sd2 = 25
#define plant growth values for each group
#calculate Cohen's d
power_analysis = function(mean1, sd1, mean2, sd2)
{
loop_df = matrix(nrow = i)
container_df = matrix(nrow = 10, ncol = 2)
sizes = c(10,20,30,40,50,60,70,80,90,100)
for(thisSize in 1:nrow(container_df)){
for(thisRun in 1:i){
sample_1 = rnorm(sizes[thisSize], m = mean1, sd = sd1)
sample_2 = rnorm(sizes[thisSize], m = mean2, sd = sd2)
t_test = t.test(sample_1,sample_2)
loop_df[thisRun] = t_test$p.value
}
container_df[thisSize, 1] = sizes[thisSize]
container_df[thisSize, 2] = sum(loop_df < .05)/i
}
plot(container_df)
lines(container_df)
plot_df = as.data.frame(container_df) %>%
rename("Sample" = V1) %>%
rename("Power" = V2)
plot = plot_df %>%
ggplot(aes(x = Sample, y = Power, color = Power)) +
geom_point() +
geom_line() +
ggtitle("Power Curve") +
geom_hline(yintercept = .8, color = "red",
linetype = "dashed", alpha = .5) +
theme_minimal() + scale_x_continuous(breaks=seq(0,100,10)) + ylim(0,1)
return(plot)
}
small_power = power_analysis(s_mean1, s_sd1, s_mean2, s_sd2) +
ggtitle("Small effect size") +
theme(legend.position='none')
med_power = power_analysis(m_mean1, m_sd1, m_mean2, m_sd2) +
ggtitle("Medium effect size") +
theme(legend.position='none')
large_power = power_analysis(l_mean1, l_sd1, l_mean2, l_sd2) +
ggtitle("Large effect size") +
theme(legend.position='none')
ggpubr::ggarrange(small_power, med_power, large_power,
nrow = 1, legend = NULL)
### A power analysis workshop for HLS 2022
#### 01 - simulating data ####
library(tidyverse)
library(lsr)
# Loop the t.test and the sim
#number of iterations ----- write this for a small, med, and large eff size
### .4, .7 and 1
### Small cohen's d = .4
i = 1000
s_mean1 = 70
s_sd1 = 25
s_mean2 = 60
s_sd2 = 25
### Medium cohen's d = .7
m_mean1 = 77.5
m_sd1 = 25
m_mean2 = 60
m_sd2 = 25
### large large cohen's d = 1
l_mean1 = 85
l_sd1 = 25
l_mean2 = 60
l_sd2 = 25
#define plant growth values for each group
#calculate Cohen's d
power_analysis = function(mean1, sd1, mean2, sd2)
{
loop_df = matrix(nrow = i)
container_df = matrix(nrow = 10, ncol = 2)
sizes = c(10,20,30,40,50,60,70,80,90,100)
for(thisSize in 1:nrow(container_df)){
for(thisRun in 1:i){
sample_1 = rnorm(sizes[thisSize], m = mean1, sd = sd1)
sample_2 = rnorm(sizes[thisSize], m = mean2, sd = sd2)
t_test = t.test(sample_1,sample_2)
loop_df[thisRun] = t_test$p.value
}
container_df[thisSize, 1] = sizes[thisSize]
container_df[thisSize, 2] = sum(loop_df < .05)/i
}
plot(container_df)
lines(container_df)
plot_df = as.data.frame(container_df) %>%
rename("Sample" = V1) %>%
rename("Power" = V2)
plot = plot_df %>%
ggplot(aes(x = Sample, y = Power, color = Power)) +
geom_point() +
geom_line() +
ggtitle("Power Curve") +
geom_hline(yintercept = .8, color = "red",
linetype = "dashed", alpha = .5) +
theme_minimal() + scale_x_continuous(breaks=seq(0,100,10)) + ylim(0,1)
return(plot)
}
small_power = power_analysis(s_mean1, s_sd1, s_mean2, s_sd2) +
ggtitle("Small effect size") +
theme(legend.position='none')
med_power = power_analysis(m_mean1, m_sd1, m_mean2, m_sd2) +
ggtitle("Medium effect size") +
theme(legend.position='none')
large_power = power_analysis(l_mean1, l_sd1, l_mean2, l_sd2) +
ggtitle("Large effect size") +
theme(legend.position='none')
ggpubr::ggarrange(small_power, med_power, large_power,
nrow = 1, legend = NULL)
sample_s = data.frame("score" = rnorm(n = 100, m = 70, sd = 25),
"participant" = 1:100)
sample_m = data.frame("score" = rnorm(n = 100, m = 77.5, sd = 25),
"participant" = 1:100)
sample_l = data.frame("score" = rnorm(n = 100, m = 85, sd = 25),
"participant" = 1:100)
draw_random_sample(sample_s)
draw_random_sample(sample_m)
draw_random_sample(sample_l)
draw_random_sample = function(full_df)
{
slice = full_df %>%
sample_n(10)
sample_highlight = full_df %>%
mutate(sampled = case_when(
participant %in% slice$participant ~ 1,
!participant %in% slice$participant ~ 0))
sample_highlight_m = sample_highlight %>%
filter(sampled == "1")
mean(sample_highlight_m$score)
sd(sample_highlight_m$score)
p = ggplot(sample_highlight, aes(x = score, fill = as.factor(sampled))) +
geom_dotplot(stackgroups = TRUE, binwidth = 2, binpositions = "all") +
annotate(geom = 'text',
label = paste0("Mean = ",
round(mean(sample_highlight_m$score),
digits = 2), " (",
round(sd(sample_highlight_m$score),
digits = 2), ")"),
x = -Inf, y = Inf, hjust = -.5, vjust = 2) +
theme(legend.position = "none")
return(p)
}
draw_random_sample(sample_1)
library(tidyverse)
sample_s = data.frame("score" = rnorm(n = 100, m = 70, sd = 25),
"participant" = 1:100)
sample_m = data.frame("score" = rnorm(n = 100, m = 77.5, sd = 25),
"participant" = 1:100)
sample_l = data.frame("score" = rnorm(n = 100, m = 85, sd = 25),
"participant" = 1:100)
draw_random_sample(sample_s)
draw_random_sample(sample_m)
draw_random_sample(sample_l)
draw_random_sample = function(full_df)
{
slice = full_df %>%
sample_n(10)
sample_highlight = full_df %>%
mutate(sampled = case_when(
participant %in% slice$participant ~ 1,
!participant %in% slice$participant ~ 0))
sample_highlight_m = sample_highlight %>%
filter(sampled == "1")
mean(sample_highlight_m$score)
sd(sample_highlight_m$score)
p = ggplot(sample_highlight, aes(x = score, fill = as.factor(sampled))) +
geom_dotplot(stackgroups = TRUE, binwidth = 2, binpositions = "all") +
annotate(geom = 'text',
label = paste0("Mean = ",
round(mean(sample_highlight_m$score),
digits = 2), " (",
round(sd(sample_highlight_m$score),
digits = 2), ")"),
x = -Inf, y = Inf, hjust = -.5, vjust = 2) +
theme(legend.position = "none")
return(p)
}
draw_random_sample(sample_1)
draw_random_sample(sample_1)
draw_random_sample(sample_s)
draw_random_sample(sample_s)
draw_random_sample(sample_s)
draw_random_sample(sample_s)
draw_random_sample(sample_s)
draw_random_sample(sample_s)
draw_random_sample(sample_s)
draw_random_sample(sample_s)
draw_random_sample(sample_s)
draw_random_sample(sample_s)
draw_random_sample(sample_s)
draw_random_sample(sample_s)
draw_random_sample(sample_s)
draw_random_sample(sample_s)
draw_random_sample(sample_s)
draw_random_sample(sample_s)
draw_random_sample(sample_s)
draw_random_sample(sample_s)
draw_random_sample = function(full_df, n)
{
slice = full_df %>%
sample_n(n)
sample_highlight = full_df %>%
mutate(sampled = case_when(
participant %in% slice$participant ~ 1,
!participant %in% slice$participant ~ 0))
sample_highlight_m = sample_highlight %>%
filter(sampled == "1")
mean(sample_highlight_m$score)
sd(sample_highlight_m$score)
p = ggplot(sample_highlight, aes(x = score, fill = as.factor(sampled))) +
geom_dotplot(stackgroups = TRUE, binwidth = 2, binpositions = "all") +
annotate(geom = 'text',
label = paste0("Mean = ",
round(mean(sample_highlight_m$score),
digits = 2), " (",
round(sd(sample_highlight_m$score),
digits = 2), ")"),
x = -Inf, y = Inf, hjust = -.5, vjust = 2) +
theme(legend.position = "none")
return(p)
}
draw_random_sample(sample_s, 10)
draw_random_sample(sample_s, 10)
draw_random_sample(sample_s, 15)
draw_random_sample(sample_s, 15)
draw_random_sample(sample_s, 15)
draw_random_sample(sample_s, 15)
draw_random_sample(sample_s, 15)
sample_s = data.frame("score" = rnorm(n = 100, m = 70, sd = 25),
"participant" = 1:1000)
sample_m = data.frame("score" = rnorm(n = 100, m = 77.5, sd = 25),
"participant" = 1:1000)
sample_l = data.frame("score" = rnorm(n = 100, m = 85, sd = 25),
"participant" = 1:1000)
draw_random_sample(sample_s, 10)
draw_random_sample(sample_s, 10)
draw_random_sample(sample_s, 10)
draw_random_sample(sample_s, 10)
draw_random_sample(sample_s, 10)
draw_random_sample(sample_s, 10)
library(tidyverse)
sample_s = data.frame("score" = rnorm(n = 500, m = 70, sd = 25),
"participant" = 1:1000)
sample_m = data.frame("score" = rnorm(n = 500, m = 77.5, sd = 25),
"participant" = 1:1000)
sample_l = data.frame("score" = rnorm(n = 500, m = 85, sd = 25),
"participant" = 1:1000)
draw_random_sample(sample_s, 10)
draw_random_sample(sample_s, 10)
draw_random_sample(sample_s, 10)
draw_random_sample(sample_s, 10)
draw_random_sample(sample_s, 10)
draw_random_sample(sample_s, 10)
draw_random_sample(sample_s, 10)
draw_random_sample(sample_s, 10)
draw_random_sample(sample_s, 10)
draw_random_sample(sample_l, 10)
draw_random_sample(sample_l, 10)
draw_random_sample(sample_l, 10)
draw_random_sample(sample_l, 10)
draw_random_sample(sample_l, 10)
draw_random_sample(sample_l, 10)
draw_random_sample(sample_l, 10)
draw_random_sample(sample_s, 10)
draw_random_sample(sample_s, 10)
draw_random_sample(sample_s, 10)
draw_random_sample(sample_s, 10)
draw_random_sample(sample_s, 10)
draw_random_sample(sample_s, 10)
draw_random_sample(sample_s, 10)
draw_random_sample(sample_s, 10)
